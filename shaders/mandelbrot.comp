#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout (binding = 0) uniform readonly UniformBufferObject {
    double zoom;
    double x_offset;
    double y_offset;
    double scaled_size_x;
    double size_offset_x;
    double scaled_size_y;
    double size_offset_y;
} ubo;
layout (binding = 1, rgba8) uniform writeonly image2D outImage;

const uint max_iter = 4096;

void main() {
    const uvec2 gid = gl_GlobalInvocationID.xy;
    const ivec2 pixel = ivec2(gid);
    const ivec2 size = imageSize(outImage);  // Get image dimensions

    if (pixel.x >= size.x || pixel.y >= size.y) {
        return;
    }

    const double base_x = double(gid.x) / ubo.scaled_size_x + ubo.size_offset_x;
    const double base_y = double(gid.y) / ubo.scaled_size_y + ubo.size_offset_y;

    const double x0 = base_x / ubo.zoom + ubo.x_offset;
    const double y0 = base_y / ubo.zoom + ubo.y_offset; 

    double x = 0.0;
    double y = 0.0;
    double x2 = 0.0;
    double y2 = 0.0;

    uint iteration = 0;

    while (x2 + y2 <= 4.0 && iteration < max_iter) {
        y = (x + x) * y + y0;
        x = x2 - y2 + x0;
        x2 = x * x;
        y2 = y * y;
        iteration = iteration + 1;
    }

    const vec4 color = vec4(vec3(1.0 - float(iteration) / float(max_iter - 1)), 1.0);

    imageStore(outImage, pixel, color);
}

// vim: shiftwidth=4 softtabstop=4 tabstop=8
